// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TypeAuthTest.Data;

#nullable disable

namespace TypeAuthTest.Migrations
{
    [DbContext(typeof(TypeAuthDbContext))]
    partial class TypeAuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TypeAuthTest.Models.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("Datatype")
                        .HasColumnType("tinyint");

                    b.Property<string>("MinMax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte>("ValueType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("TypeAuthTest.Models.ClaimDependency", b =>
                {
                    b.Property<int>("BaseClaimId")
                        .HasColumnType("int");

                    b.Property<int>("DependedOnClaimId")
                        .HasColumnType("int");

                    b.HasKey("BaseClaimId", "DependedOnClaimId");

                    b.HasIndex("DependedOnClaimId");

                    b.ToTable("ClaimDependency");
                });

            modelBuilder.Entity("TypeAuthTest.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TypeAuthTest.Models.RoleClaim", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("TypeAuthTest.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TypeAuthTest.Models.UserInRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserInRole");
                });

            modelBuilder.Entity("TypeAuthTest.Models.Claim", b =>
                {
                    b.HasOne("TypeAuthTest.Models.Claim", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TypeAuthTest.Models.ClaimDependency", b =>
                {
                    b.HasOne("TypeAuthTest.Models.Claim", "BaseClaim")
                        .WithMany("ThisClaimDependedOn")
                        .HasForeignKey("BaseClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TypeAuthTest.Models.Claim", "DependedOnClaim")
                        .WithMany("DependedOnThisClaim")
                        .HasForeignKey("DependedOnClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseClaim");

                    b.Navigation("DependedOnClaim");
                });

            modelBuilder.Entity("TypeAuthTest.Models.RoleClaim", b =>
                {
                    b.HasOne("TypeAuthTest.Models.Claim", "Claim")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TypeAuthTest.Models.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TypeAuthTest.Models.UserInRole", b =>
                {
                    b.HasOne("TypeAuthTest.Models.Role", "Role")
                        .WithMany("UserInRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TypeAuthTest.Models.User", "User")
                        .WithMany("UserInRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TypeAuthTest.Models.Claim", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("DependedOnThisClaim");

                    b.Navigation("RoleClaims");

                    b.Navigation("ThisClaimDependedOn");
                });

            modelBuilder.Entity("TypeAuthTest.Models.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserInRoles");
                });

            modelBuilder.Entity("TypeAuthTest.Models.User", b =>
                {
                    b.Navigation("UserInRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
